# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AppStartResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, response_code=None, description=None, resources=None, push_api_keys=None, display_tc=None, languages=None, currencies=None, device_token=None):
        """
        AppStartResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'response_code': 'int',
            'description': 'str',
            'resources': 'Resources',
            'push_api_keys': 'PushCredentials',
            'display_tc': 'bool',
            'languages': 'list[SupportedLanguageResponse]',
            'currencies': 'list[str]',
            'device_token': 'str'
        }

        self.attribute_map = {
            'response_code': 'ResponseCode',
            'description': 'Description',
            'resources': 'Resources',
            'push_api_keys': 'PushAPIKeys',
            'display_tc': 'DisplayTC',
            'languages': 'Languages',
            'currencies': 'Currencies',
            'device_token': 'DeviceToken'
        }

        self._response_code = response_code
        self._description = description
        self._resources = resources
        self._push_api_keys = push_api_keys
        self._display_tc = display_tc
        self._languages = languages
        self._currencies = currencies
        self._device_token = device_token

    @property
    def response_code(self):
        """
        Gets the response_code of this AppStartResponse.
        1 - Success; 34 - (Assumption) Terms&Conditions not agreed;

        :return: The response_code of this AppStartResponse.
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this AppStartResponse.
        1 - Success; 34 - (Assumption) Terms&Conditions not agreed;

        :param response_code: The response_code of this AppStartResponse.
        :type: int
        """

        self._response_code = response_code

    @property
    def description(self):
        """
        Gets the description of this AppStartResponse.

        :return: The description of this AppStartResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AppStartResponse.

        :param description: The description of this AppStartResponse.
        :type: str
        """

        self._description = description

    @property
    def resources(self):
        """
        Gets the resources of this AppStartResponse.

        :return: The resources of this AppStartResponse.
        :rtype: Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this AppStartResponse.

        :param resources: The resources of this AppStartResponse.
        :type: Resources
        """

        self._resources = resources

    @property
    def push_api_keys(self):
        """
        Gets the push_api_keys of this AppStartResponse.

        :return: The push_api_keys of this AppStartResponse.
        :rtype: PushCredentials
        """
        return self._push_api_keys

    @push_api_keys.setter
    def push_api_keys(self, push_api_keys):
        """
        Sets the push_api_keys of this AppStartResponse.

        :param push_api_keys: The push_api_keys of this AppStartResponse.
        :type: PushCredentials
        """

        self._push_api_keys = push_api_keys

    @property
    def display_tc(self):
        """
        Gets the display_tc of this AppStartResponse.

        :return: The display_tc of this AppStartResponse.
        :rtype: bool
        """
        return self._display_tc

    @display_tc.setter
    def display_tc(self, display_tc):
        """
        Sets the display_tc of this AppStartResponse.

        :param display_tc: The display_tc of this AppStartResponse.
        :type: bool
        """

        self._display_tc = display_tc

    @property
    def languages(self):
        """
        Gets the languages of this AppStartResponse.

        :return: The languages of this AppStartResponse.
        :rtype: list[SupportedLanguageResponse]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """
        Sets the languages of this AppStartResponse.

        :param languages: The languages of this AppStartResponse.
        :type: list[SupportedLanguageResponse]
        """

        self._languages = languages

    @property
    def currencies(self):
        """
        Gets the currencies of this AppStartResponse.

        :return: The currencies of this AppStartResponse.
        :rtype: list[str]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """
        Sets the currencies of this AppStartResponse.

        :param currencies: The currencies of this AppStartResponse.
        :type: list[str]
        """

        self._currencies = currencies

    @property
    def device_token(self):
        """
        Gets the device_token of this AppStartResponse.

        :return: The device_token of this AppStartResponse.
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token):
        """
        Sets the device_token of this AppStartResponse.

        :param device_token: The device_token of this AppStartResponse.
        :type: str
        """

        self._device_token = device_token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AppStartResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
