# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Resources(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, list=None, time_stamp=None):
        """
        Resources - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'list': 'list[MobileResource]',
            'time_stamp': 'str'
        }

        self.attribute_map = {
            'list': 'List',
            'time_stamp': 'TimeStamp'
        }

        self._list = list
        self._time_stamp = time_stamp

    @property
    def list(self):
        """
        Gets the list of this Resources.

        :return: The list of this Resources.
        :rtype: list[MobileResource]
        """
        return self._list

    @list.setter
    def list(self, list):
        """
        Sets the list of this Resources.

        :param list: The list of this Resources.
        :type: list[MobileResource]
        """

        self._list = list

    @property
    def time_stamp(self):
        """
        Gets the time_stamp of this Resources.

        :return: The time_stamp of this Resources.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """
        Sets the time_stamp of this Resources.

        :param time_stamp: The time_stamp of this Resources.
        :type: str
        """

        self._time_stamp = time_stamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Resources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
