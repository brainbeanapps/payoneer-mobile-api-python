# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResourcesResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, response_code=None, resources=None, language_code=None, iso_code=None, is_rtl=None):
        """
        ResourcesResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'response_code': 'int',
            'resources': 'Resources',
            'language_code': 'LanguageCode',
            'iso_code': 'str',
            'is_rtl': 'bool'
        }

        self.attribute_map = {
            'response_code': 'ResponseCode',
            'resources': 'Resources',
            'language_code': 'LanguageCode',
            'iso_code': 'ISOCode',
            'is_rtl': 'IsRTL'
        }

        self._response_code = response_code
        self._resources = resources
        self._language_code = language_code
        self._iso_code = iso_code
        self._is_rtl = is_rtl

    @property
    def response_code(self):
        """
        Gets the response_code of this ResourcesResponse.

        :return: The response_code of this ResourcesResponse.
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this ResourcesResponse.

        :param response_code: The response_code of this ResourcesResponse.
        :type: int
        """

        self._response_code = response_code

    @property
    def resources(self):
        """
        Gets the resources of this ResourcesResponse.

        :return: The resources of this ResourcesResponse.
        :rtype: Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this ResourcesResponse.

        :param resources: The resources of this ResourcesResponse.
        :type: Resources
        """

        self._resources = resources

    @property
    def language_code(self):
        """
        Gets the language_code of this ResourcesResponse.

        :return: The language_code of this ResourcesResponse.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """
        Sets the language_code of this ResourcesResponse.

        :param language_code: The language_code of this ResourcesResponse.
        :type: LanguageCode
        """

        self._language_code = language_code

    @property
    def iso_code(self):
        """
        Gets the iso_code of this ResourcesResponse.

        :return: The iso_code of this ResourcesResponse.
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """
        Sets the iso_code of this ResourcesResponse.

        :param iso_code: The iso_code of this ResourcesResponse.
        :type: str
        """

        self._iso_code = iso_code

    @property
    def is_rtl(self):
        """
        Gets the is_rtl of this ResourcesResponse.

        :return: The is_rtl of this ResourcesResponse.
        :rtype: bool
        """
        return self._is_rtl

    @is_rtl.setter
    def is_rtl(self, is_rtl):
        """
        Sets the is_rtl of this ResourcesResponse.

        :param is_rtl: The is_rtl of this ResourcesResponse.
        :type: bool
        """

        self._is_rtl = is_rtl

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourcesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
