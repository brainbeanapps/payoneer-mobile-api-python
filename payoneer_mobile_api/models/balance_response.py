# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BalanceResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, response_code=None, response_description=None, account_balance=None, account_balance_in_card_currency=None, card_balance=None, card_balance_in_card_currency=None, card_currency=None, last_processed=None, requested_currency=None):
        """
        BalanceResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'response_code': 'int',
            'response_description': 'str',
            'account_balance': 'str',
            'account_balance_in_card_currency': 'str',
            'card_balance': 'str',
            'card_balance_in_card_currency': 'str',
            'card_currency': 'str',
            'last_processed': 'str',
            'requested_currency': 'str'
        }

        self.attribute_map = {
            'response_code': 'ResponseCode',
            'response_description': 'ResponseDescription',
            'account_balance': 'AccountBalance',
            'account_balance_in_card_currency': 'AccountBalanceInCardCurrency',
            'card_balance': 'CardBalance',
            'card_balance_in_card_currency': 'CardBalanceInCardCurrency',
            'card_currency': 'CardCurrency',
            'last_processed': 'LastProcessed',
            'requested_currency': 'RequestedCurrency'
        }

        self._response_code = response_code
        self._response_description = response_description
        self._account_balance = account_balance
        self._account_balance_in_card_currency = account_balance_in_card_currency
        self._card_balance = card_balance
        self._card_balance_in_card_currency = card_balance_in_card_currency
        self._card_currency = card_currency
        self._last_processed = last_processed
        self._requested_currency = requested_currency

    @property
    def response_code(self):
        """
        Gets the response_code of this BalanceResponse.
        1 - Success; 34 - (Assumption) Terms&Conditions not agreed;

        :return: The response_code of this BalanceResponse.
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this BalanceResponse.
        1 - Success; 34 - (Assumption) Terms&Conditions not agreed;

        :param response_code: The response_code of this BalanceResponse.
        :type: int
        """

        self._response_code = response_code

    @property
    def response_description(self):
        """
        Gets the response_description of this BalanceResponse.

        :return: The response_description of this BalanceResponse.
        :rtype: str
        """
        return self._response_description

    @response_description.setter
    def response_description(self, response_description):
        """
        Sets the response_description of this BalanceResponse.

        :param response_description: The response_description of this BalanceResponse.
        :type: str
        """

        self._response_description = response_description

    @property
    def account_balance(self):
        """
        Gets the account_balance of this BalanceResponse.

        :return: The account_balance of this BalanceResponse.
        :rtype: str
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """
        Sets the account_balance of this BalanceResponse.

        :param account_balance: The account_balance of this BalanceResponse.
        :type: str
        """

        self._account_balance = account_balance

    @property
    def account_balance_in_card_currency(self):
        """
        Gets the account_balance_in_card_currency of this BalanceResponse.

        :return: The account_balance_in_card_currency of this BalanceResponse.
        :rtype: str
        """
        return self._account_balance_in_card_currency

    @account_balance_in_card_currency.setter
    def account_balance_in_card_currency(self, account_balance_in_card_currency):
        """
        Sets the account_balance_in_card_currency of this BalanceResponse.

        :param account_balance_in_card_currency: The account_balance_in_card_currency of this BalanceResponse.
        :type: str
        """

        self._account_balance_in_card_currency = account_balance_in_card_currency

    @property
    def card_balance(self):
        """
        Gets the card_balance of this BalanceResponse.

        :return: The card_balance of this BalanceResponse.
        :rtype: str
        """
        return self._card_balance

    @card_balance.setter
    def card_balance(self, card_balance):
        """
        Sets the card_balance of this BalanceResponse.

        :param card_balance: The card_balance of this BalanceResponse.
        :type: str
        """

        self._card_balance = card_balance

    @property
    def card_balance_in_card_currency(self):
        """
        Gets the card_balance_in_card_currency of this BalanceResponse.

        :return: The card_balance_in_card_currency of this BalanceResponse.
        :rtype: str
        """
        return self._card_balance_in_card_currency

    @card_balance_in_card_currency.setter
    def card_balance_in_card_currency(self, card_balance_in_card_currency):
        """
        Sets the card_balance_in_card_currency of this BalanceResponse.

        :param card_balance_in_card_currency: The card_balance_in_card_currency of this BalanceResponse.
        :type: str
        """

        self._card_balance_in_card_currency = card_balance_in_card_currency

    @property
    def card_currency(self):
        """
        Gets the card_currency of this BalanceResponse.

        :return: The card_currency of this BalanceResponse.
        :rtype: str
        """
        return self._card_currency

    @card_currency.setter
    def card_currency(self, card_currency):
        """
        Sets the card_currency of this BalanceResponse.

        :param card_currency: The card_currency of this BalanceResponse.
        :type: str
        """

        self._card_currency = card_currency

    @property
    def last_processed(self):
        """
        Gets the last_processed of this BalanceResponse.

        :return: The last_processed of this BalanceResponse.
        :rtype: str
        """
        return self._last_processed

    @last_processed.setter
    def last_processed(self, last_processed):
        """
        Sets the last_processed of this BalanceResponse.

        :param last_processed: The last_processed of this BalanceResponse.
        :type: str
        """

        self._last_processed = last_processed

    @property
    def requested_currency(self):
        """
        Gets the requested_currency of this BalanceResponse.

        :return: The requested_currency of this BalanceResponse.
        :rtype: str
        """
        return self._requested_currency

    @requested_currency.setter
    def requested_currency(self, requested_currency):
        """
        Sets the requested_currency of this BalanceResponse.

        :param requested_currency: The requested_currency of this BalanceResponse.
        :type: str
        """

        self._requested_currency = requested_currency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BalanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
