# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChallengeAuthenticateResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, response_code=None, description=None, is_last_attempt=None, event_id=None, action_response=None):
        """
        ChallengeAuthenticateResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'response_code': 'int',
            'description': 'str',
            'is_last_attempt': 'bool',
            'event_id': 'int',
            'action_response': 'BaseResponse'
        }

        self.attribute_map = {
            'response_code': 'ResponseCode',
            'description': 'Description',
            'is_last_attempt': 'IsLastAttempt',
            'event_id': 'EventId',
            'action_response': 'ActionResponse'
        }

        self._response_code = response_code
        self._description = description
        self._is_last_attempt = is_last_attempt
        self._event_id = event_id
        self._action_response = action_response

    @property
    def response_code(self):
        """
        Gets the response_code of this ChallengeAuthenticateResponse.
        1 - Success; 34 - (Assumption) Terms&Conditions not agreed;

        :return: The response_code of this ChallengeAuthenticateResponse.
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this ChallengeAuthenticateResponse.
        1 - Success; 34 - (Assumption) Terms&Conditions not agreed;

        :param response_code: The response_code of this ChallengeAuthenticateResponse.
        :type: int
        """

        self._response_code = response_code

    @property
    def description(self):
        """
        Gets the description of this ChallengeAuthenticateResponse.

        :return: The description of this ChallengeAuthenticateResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ChallengeAuthenticateResponse.

        :param description: The description of this ChallengeAuthenticateResponse.
        :type: str
        """

        self._description = description

    @property
    def is_last_attempt(self):
        """
        Gets the is_last_attempt of this ChallengeAuthenticateResponse.

        :return: The is_last_attempt of this ChallengeAuthenticateResponse.
        :rtype: bool
        """
        return self._is_last_attempt

    @is_last_attempt.setter
    def is_last_attempt(self, is_last_attempt):
        """
        Sets the is_last_attempt of this ChallengeAuthenticateResponse.

        :param is_last_attempt: The is_last_attempt of this ChallengeAuthenticateResponse.
        :type: bool
        """

        self._is_last_attempt = is_last_attempt

    @property
    def event_id(self):
        """
        Gets the event_id of this ChallengeAuthenticateResponse.

        :return: The event_id of this ChallengeAuthenticateResponse.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """
        Sets the event_id of this ChallengeAuthenticateResponse.

        :param event_id: The event_id of this ChallengeAuthenticateResponse.
        :type: int
        """

        self._event_id = event_id

    @property
    def action_response(self):
        """
        Gets the action_response of this ChallengeAuthenticateResponse.

        :return: The action_response of this ChallengeAuthenticateResponse.
        :rtype: BaseResponse
        """
        return self._action_response

    @action_response.setter
    def action_response(self, action_response):
        """
        Sets the action_response of this ChallengeAuthenticateResponse.

        :param action_response: The action_response of this ChallengeAuthenticateResponse.
        :type: BaseResponse
        """

        self._action_response = action_response

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChallengeAuthenticateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
