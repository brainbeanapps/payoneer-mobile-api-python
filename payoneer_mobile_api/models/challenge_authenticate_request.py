# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChallengeAuthenticateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device_id=None, mac=None, sms_code=None, security_answers=None):
        """
        ChallengeAuthenticateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_id': 'DeviceId',
            'mac': 'str',
            'sms_code': 'str',
            'security_answers': 'SecurityAnswers'
        }

        self.attribute_map = {
            'device_id': 'DeviceId',
            'mac': 'MAC',
            'sms_code': 'SmsCode',
            'security_answers': 'SecurityAnswers'
        }

        self._device_id = device_id
        self._mac = mac
        self._sms_code = sms_code
        self._security_answers = security_answers

    @property
    def device_id(self):
        """
        Gets the device_id of this ChallengeAuthenticateRequest.

        :return: The device_id of this ChallengeAuthenticateRequest.
        :rtype: DeviceId
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this ChallengeAuthenticateRequest.

        :param device_id: The device_id of this ChallengeAuthenticateRequest.
        :type: DeviceId
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def mac(self):
        """
        Gets the mac of this ChallengeAuthenticateRequest.

        :return: The mac of this ChallengeAuthenticateRequest.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """
        Sets the mac of this ChallengeAuthenticateRequest.

        :param mac: The mac of this ChallengeAuthenticateRequest.
        :type: str
        """

        self._mac = mac

    @property
    def sms_code(self):
        """
        Gets the sms_code of this ChallengeAuthenticateRequest.

        :return: The sms_code of this ChallengeAuthenticateRequest.
        :rtype: str
        """
        return self._sms_code

    @sms_code.setter
    def sms_code(self, sms_code):
        """
        Sets the sms_code of this ChallengeAuthenticateRequest.

        :param sms_code: The sms_code of this ChallengeAuthenticateRequest.
        :type: str
        """

        self._sms_code = sms_code

    @property
    def security_answers(self):
        """
        Gets the security_answers of this ChallengeAuthenticateRequest.

        :return: The security_answers of this ChallengeAuthenticateRequest.
        :rtype: SecurityAnswers
        """
        return self._security_answers

    @security_answers.setter
    def security_answers(self, security_answers):
        """
        Sets the security_answers of this ChallengeAuthenticateRequest.

        :param security_answers: The security_answers of this ChallengeAuthenticateRequest.
        :type: SecurityAnswers
        """

        self._security_answers = security_answers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChallengeAuthenticateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
