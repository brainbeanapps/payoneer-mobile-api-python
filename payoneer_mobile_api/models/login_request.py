# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LoginRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device_id=None, mac=None, password=None, username=None, mobile_app_id=None, app_version=None, extended_login_data=None, language_code=None, utc_time_zone=None, currency=None, timestamp=None, mobile_platform_type=None, device_properties=None):
        """
        LoginRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_id': 'DeviceId',
            'mac': 'str',
            'password': 'str',
            'username': 'str',
            'mobile_app_id': 'MobileAppId',
            'app_version': 'AppVersion',
            'extended_login_data': 'str',
            'language_code': 'LanguageCode',
            'utc_time_zone': 'int',
            'currency': 'str',
            'timestamp': 'date',
            'mobile_platform_type': 'int',
            'device_properties': 'DeviceProperties'
        }

        self.attribute_map = {
            'device_id': 'DeviceId',
            'mac': 'MAC',
            'password': 'Password',
            'username': 'Username',
            'mobile_app_id': 'MobileAppId',
            'app_version': 'AppVersion',
            'extended_login_data': 'ExtendedLoginData',
            'language_code': 'LanguageCode',
            'utc_time_zone': 'UTCTimeZone',
            'currency': 'Currency',
            'timestamp': 'Timestamp',
            'mobile_platform_type': 'MobilePlatformType',
            'device_properties': 'DeviceProperties'
        }

        self._device_id = device_id
        self._mac = mac
        self._password = password
        self._username = username
        self._mobile_app_id = mobile_app_id
        self._app_version = app_version
        self._extended_login_data = extended_login_data
        self._language_code = language_code
        self._utc_time_zone = utc_time_zone
        self._currency = currency
        self._timestamp = timestamp
        self._mobile_platform_type = mobile_platform_type
        self._device_properties = device_properties

    @property
    def device_id(self):
        """
        Gets the device_id of this LoginRequest.

        :return: The device_id of this LoginRequest.
        :rtype: DeviceId
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this LoginRequest.

        :param device_id: The device_id of this LoginRequest.
        :type: DeviceId
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def mac(self):
        """
        Gets the mac of this LoginRequest.

        :return: The mac of this LoginRequest.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """
        Sets the mac of this LoginRequest.

        :param mac: The mac of this LoginRequest.
        :type: str
        """

        self._mac = mac

    @property
    def password(self):
        """
        Gets the password of this LoginRequest.

        :return: The password of this LoginRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this LoginRequest.

        :param password: The password of this LoginRequest.
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """
        Gets the username of this LoginRequest.

        :return: The username of this LoginRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this LoginRequest.

        :param username: The username of this LoginRequest.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def mobile_app_id(self):
        """
        Gets the mobile_app_id of this LoginRequest.

        :return: The mobile_app_id of this LoginRequest.
        :rtype: MobileAppId
        """
        return self._mobile_app_id

    @mobile_app_id.setter
    def mobile_app_id(self, mobile_app_id):
        """
        Sets the mobile_app_id of this LoginRequest.

        :param mobile_app_id: The mobile_app_id of this LoginRequest.
        :type: MobileAppId
        """
        if mobile_app_id is None:
            raise ValueError("Invalid value for `mobile_app_id`, must not be `None`")

        self._mobile_app_id = mobile_app_id

    @property
    def app_version(self):
        """
        Gets the app_version of this LoginRequest.

        :return: The app_version of this LoginRequest.
        :rtype: AppVersion
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """
        Sets the app_version of this LoginRequest.

        :param app_version: The app_version of this LoginRequest.
        :type: AppVersion
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")

        self._app_version = app_version

    @property
    def extended_login_data(self):
        """
        Gets the extended_login_data of this LoginRequest.
        (Assumption) Captcha code

        :return: The extended_login_data of this LoginRequest.
        :rtype: str
        """
        return self._extended_login_data

    @extended_login_data.setter
    def extended_login_data(self, extended_login_data):
        """
        Sets the extended_login_data of this LoginRequest.
        (Assumption) Captcha code

        :param extended_login_data: The extended_login_data of this LoginRequest.
        :type: str
        """

        self._extended_login_data = extended_login_data

    @property
    def language_code(self):
        """
        Gets the language_code of this LoginRequest.

        :return: The language_code of this LoginRequest.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """
        Sets the language_code of this LoginRequest.

        :param language_code: The language_code of this LoginRequest.
        :type: LanguageCode
        """

        self._language_code = language_code

    @property
    def utc_time_zone(self):
        """
        Gets the utc_time_zone of this LoginRequest.

        :return: The utc_time_zone of this LoginRequest.
        :rtype: int
        """
        return self._utc_time_zone

    @utc_time_zone.setter
    def utc_time_zone(self, utc_time_zone):
        """
        Sets the utc_time_zone of this LoginRequest.

        :param utc_time_zone: The utc_time_zone of this LoginRequest.
        :type: int
        """

        self._utc_time_zone = utc_time_zone

    @property
    def currency(self):
        """
        Gets the currency of this LoginRequest.

        :return: The currency of this LoginRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this LoginRequest.

        :param currency: The currency of this LoginRequest.
        :type: str
        """

        self._currency = currency

    @property
    def timestamp(self):
        """
        Gets the timestamp of this LoginRequest.

        :return: The timestamp of this LoginRequest.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this LoginRequest.

        :param timestamp: The timestamp of this LoginRequest.
        :type: date
        """

        self._timestamp = timestamp

    @property
    def mobile_platform_type(self):
        """
        Gets the mobile_platform_type of this LoginRequest.

        :return: The mobile_platform_type of this LoginRequest.
        :rtype: int
        """
        return self._mobile_platform_type

    @mobile_platform_type.setter
    def mobile_platform_type(self, mobile_platform_type):
        """
        Sets the mobile_platform_type of this LoginRequest.

        :param mobile_platform_type: The mobile_platform_type of this LoginRequest.
        :type: int
        """

        self._mobile_platform_type = mobile_platform_type

    @property
    def device_properties(self):
        """
        Gets the device_properties of this LoginRequest.

        :return: The device_properties of this LoginRequest.
        :rtype: DeviceProperties
        """
        return self._device_properties

    @device_properties.setter
    def device_properties(self, device_properties):
        """
        Sets the device_properties of this LoginRequest.

        :param device_properties: The device_properties of this LoginRequest.
        :type: DeviceProperties
        """

        self._device_properties = device_properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LoginRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
