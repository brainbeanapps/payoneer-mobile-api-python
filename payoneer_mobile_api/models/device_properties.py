# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device_print=None, device_token=None, device_token_fso=None, http_accept=None, http_accept_encoding=None, http_accept_language=None, http_referer=None):
        """
        DeviceProperties - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_print': 'str',
            'device_token': 'str',
            'device_token_fso': 'str',
            'http_accept': 'str',
            'http_accept_encoding': 'str',
            'http_accept_language': 'str',
            'http_referer': 'str'
        }

        self.attribute_map = {
            'device_print': 'DevicePrint',
            'device_token': 'DeviceToken',
            'device_token_fso': 'DeviceTokenFSO',
            'http_accept': 'HttpAccept',
            'http_accept_encoding': 'HttpAcceptEncoding',
            'http_accept_language': 'HttpAcceptLanguage',
            'http_referer': 'HttpReferer'
        }

        self._device_print = device_print
        self._device_token = device_token
        self._device_token_fso = device_token_fso
        self._http_accept = http_accept
        self._http_accept_encoding = http_accept_encoding
        self._http_accept_language = http_accept_language
        self._http_referer = http_referer

    @property
    def device_print(self):
        """
        Gets the device_print of this DeviceProperties.

        :return: The device_print of this DeviceProperties.
        :rtype: str
        """
        return self._device_print

    @device_print.setter
    def device_print(self, device_print):
        """
        Sets the device_print of this DeviceProperties.

        :param device_print: The device_print of this DeviceProperties.
        :type: str
        """

        self._device_print = device_print

    @property
    def device_token(self):
        """
        Gets the device_token of this DeviceProperties.

        :return: The device_token of this DeviceProperties.
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token):
        """
        Sets the device_token of this DeviceProperties.

        :param device_token: The device_token of this DeviceProperties.
        :type: str
        """

        self._device_token = device_token

    @property
    def device_token_fso(self):
        """
        Gets the device_token_fso of this DeviceProperties.

        :return: The device_token_fso of this DeviceProperties.
        :rtype: str
        """
        return self._device_token_fso

    @device_token_fso.setter
    def device_token_fso(self, device_token_fso):
        """
        Sets the device_token_fso of this DeviceProperties.

        :param device_token_fso: The device_token_fso of this DeviceProperties.
        :type: str
        """

        self._device_token_fso = device_token_fso

    @property
    def http_accept(self):
        """
        Gets the http_accept of this DeviceProperties.

        :return: The http_accept of this DeviceProperties.
        :rtype: str
        """
        return self._http_accept

    @http_accept.setter
    def http_accept(self, http_accept):
        """
        Sets the http_accept of this DeviceProperties.

        :param http_accept: The http_accept of this DeviceProperties.
        :type: str
        """

        self._http_accept = http_accept

    @property
    def http_accept_encoding(self):
        """
        Gets the http_accept_encoding of this DeviceProperties.

        :return: The http_accept_encoding of this DeviceProperties.
        :rtype: str
        """
        return self._http_accept_encoding

    @http_accept_encoding.setter
    def http_accept_encoding(self, http_accept_encoding):
        """
        Sets the http_accept_encoding of this DeviceProperties.

        :param http_accept_encoding: The http_accept_encoding of this DeviceProperties.
        :type: str
        """

        self._http_accept_encoding = http_accept_encoding

    @property
    def http_accept_language(self):
        """
        Gets the http_accept_language of this DeviceProperties.

        :return: The http_accept_language of this DeviceProperties.
        :rtype: str
        """
        return self._http_accept_language

    @http_accept_language.setter
    def http_accept_language(self, http_accept_language):
        """
        Sets the http_accept_language of this DeviceProperties.

        :param http_accept_language: The http_accept_language of this DeviceProperties.
        :type: str
        """

        self._http_accept_language = http_accept_language

    @property
    def http_referer(self):
        """
        Gets the http_referer of this DeviceProperties.

        :return: The http_referer of this DeviceProperties.
        :rtype: str
        """
        return self._http_referer

    @http_referer.setter
    def http_referer(self, http_referer):
        """
        Sets the http_referer of this DeviceProperties.

        :param http_referer: The http_referer of this DeviceProperties.
        :type: str
        """

        self._http_referer = http_referer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
