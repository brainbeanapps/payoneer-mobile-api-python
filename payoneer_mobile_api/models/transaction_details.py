# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TransactionDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_virtual=None, amount_virtual1=None, amount_virtual2=None, merchant_name=None, merchant_location=None, country=None, transaction_type=None, transaction_amount_in_cards_currency=None, conversion_rate=None, withdrawal_fee=None, conversion_fee_in_cards_currency=None, conversion_fee=None, conversion_fee_percent=None, transaction_number=None, transaction_date=None, amount_foreign_currency=None, transaction_amount=None, extra_details=None):
        """
        TransactionDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_virtual': 'bool',
            'amount_virtual1': 'LabelValuePair',
            'amount_virtual2': 'LabelValuePair',
            'merchant_name': 'LabelValuePair',
            'merchant_location': 'LabelValuePair',
            'country': 'LabelValuePair',
            'transaction_type': 'LabelValuePair',
            'transaction_amount_in_cards_currency': 'LabelValuePair',
            'conversion_rate': 'LabelValuePair',
            'withdrawal_fee': 'LabelValuePair',
            'conversion_fee_in_cards_currency': 'LabelValuePair',
            'conversion_fee': 'LabelValuePair',
            'conversion_fee_percent': 'LabelValuePair',
            'transaction_number': 'LabelValuePair',
            'transaction_date': 'LabelValuePair',
            'amount_foreign_currency': 'LabelValuePair',
            'transaction_amount': 'LabelValuePair',
            'extra_details': 'list[LabelValuePair]'
        }

        self.attribute_map = {
            'is_virtual': 'IsVirtual',
            'amount_virtual1': 'AmountVirtual1',
            'amount_virtual2': 'AmountVirtual2',
            'merchant_name': 'MerchantName',
            'merchant_location': 'MerchantLocation',
            'country': 'Country',
            'transaction_type': 'TransactionType',
            'transaction_amount_in_cards_currency': 'TransactionAmountInCardsCurrency',
            'conversion_rate': 'ConversionRate',
            'withdrawal_fee': 'WithdrawalFee',
            'conversion_fee_in_cards_currency': 'ConversionFeeInCardsCurrency',
            'conversion_fee': 'ConversionFee',
            'conversion_fee_percent': 'ConversionFeePercent',
            'transaction_number': 'TransactionNumber',
            'transaction_date': 'TransactionDate',
            'amount_foreign_currency': 'AmountForeignCurrency',
            'transaction_amount': 'TransactionAmount',
            'extra_details': 'ExtraDetails'
        }

        self._is_virtual = is_virtual
        self._amount_virtual1 = amount_virtual1
        self._amount_virtual2 = amount_virtual2
        self._merchant_name = merchant_name
        self._merchant_location = merchant_location
        self._country = country
        self._transaction_type = transaction_type
        self._transaction_amount_in_cards_currency = transaction_amount_in_cards_currency
        self._conversion_rate = conversion_rate
        self._withdrawal_fee = withdrawal_fee
        self._conversion_fee_in_cards_currency = conversion_fee_in_cards_currency
        self._conversion_fee = conversion_fee
        self._conversion_fee_percent = conversion_fee_percent
        self._transaction_number = transaction_number
        self._transaction_date = transaction_date
        self._amount_foreign_currency = amount_foreign_currency
        self._transaction_amount = transaction_amount
        self._extra_details = extra_details

    @property
    def is_virtual(self):
        """
        Gets the is_virtual of this TransactionDetails.

        :return: The is_virtual of this TransactionDetails.
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """
        Sets the is_virtual of this TransactionDetails.

        :param is_virtual: The is_virtual of this TransactionDetails.
        :type: bool
        """

        self._is_virtual = is_virtual

    @property
    def amount_virtual1(self):
        """
        Gets the amount_virtual1 of this TransactionDetails.

        :return: The amount_virtual1 of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._amount_virtual1

    @amount_virtual1.setter
    def amount_virtual1(self, amount_virtual1):
        """
        Sets the amount_virtual1 of this TransactionDetails.

        :param amount_virtual1: The amount_virtual1 of this TransactionDetails.
        :type: LabelValuePair
        """

        self._amount_virtual1 = amount_virtual1

    @property
    def amount_virtual2(self):
        """
        Gets the amount_virtual2 of this TransactionDetails.

        :return: The amount_virtual2 of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._amount_virtual2

    @amount_virtual2.setter
    def amount_virtual2(self, amount_virtual2):
        """
        Sets the amount_virtual2 of this TransactionDetails.

        :param amount_virtual2: The amount_virtual2 of this TransactionDetails.
        :type: LabelValuePair
        """

        self._amount_virtual2 = amount_virtual2

    @property
    def merchant_name(self):
        """
        Gets the merchant_name of this TransactionDetails.

        :return: The merchant_name of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """
        Sets the merchant_name of this TransactionDetails.

        :param merchant_name: The merchant_name of this TransactionDetails.
        :type: LabelValuePair
        """

        self._merchant_name = merchant_name

    @property
    def merchant_location(self):
        """
        Gets the merchant_location of this TransactionDetails.

        :return: The merchant_location of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._merchant_location

    @merchant_location.setter
    def merchant_location(self, merchant_location):
        """
        Sets the merchant_location of this TransactionDetails.

        :param merchant_location: The merchant_location of this TransactionDetails.
        :type: LabelValuePair
        """

        self._merchant_location = merchant_location

    @property
    def country(self):
        """
        Gets the country of this TransactionDetails.

        :return: The country of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this TransactionDetails.

        :param country: The country of this TransactionDetails.
        :type: LabelValuePair
        """

        self._country = country

    @property
    def transaction_type(self):
        """
        Gets the transaction_type of this TransactionDetails.

        :return: The transaction_type of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """
        Sets the transaction_type of this TransactionDetails.

        :param transaction_type: The transaction_type of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_type = transaction_type

    @property
    def transaction_amount_in_cards_currency(self):
        """
        Gets the transaction_amount_in_cards_currency of this TransactionDetails.

        :return: The transaction_amount_in_cards_currency of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_amount_in_cards_currency

    @transaction_amount_in_cards_currency.setter
    def transaction_amount_in_cards_currency(self, transaction_amount_in_cards_currency):
        """
        Sets the transaction_amount_in_cards_currency of this TransactionDetails.

        :param transaction_amount_in_cards_currency: The transaction_amount_in_cards_currency of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_amount_in_cards_currency = transaction_amount_in_cards_currency

    @property
    def conversion_rate(self):
        """
        Gets the conversion_rate of this TransactionDetails.

        :return: The conversion_rate of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """
        Sets the conversion_rate of this TransactionDetails.

        :param conversion_rate: The conversion_rate of this TransactionDetails.
        :type: LabelValuePair
        """

        self._conversion_rate = conversion_rate

    @property
    def withdrawal_fee(self):
        """
        Gets the withdrawal_fee of this TransactionDetails.

        :return: The withdrawal_fee of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._withdrawal_fee

    @withdrawal_fee.setter
    def withdrawal_fee(self, withdrawal_fee):
        """
        Sets the withdrawal_fee of this TransactionDetails.

        :param withdrawal_fee: The withdrawal_fee of this TransactionDetails.
        :type: LabelValuePair
        """

        self._withdrawal_fee = withdrawal_fee

    @property
    def conversion_fee_in_cards_currency(self):
        """
        Gets the conversion_fee_in_cards_currency of this TransactionDetails.

        :return: The conversion_fee_in_cards_currency of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._conversion_fee_in_cards_currency

    @conversion_fee_in_cards_currency.setter
    def conversion_fee_in_cards_currency(self, conversion_fee_in_cards_currency):
        """
        Sets the conversion_fee_in_cards_currency of this TransactionDetails.

        :param conversion_fee_in_cards_currency: The conversion_fee_in_cards_currency of this TransactionDetails.
        :type: LabelValuePair
        """

        self._conversion_fee_in_cards_currency = conversion_fee_in_cards_currency

    @property
    def conversion_fee(self):
        """
        Gets the conversion_fee of this TransactionDetails.

        :return: The conversion_fee of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._conversion_fee

    @conversion_fee.setter
    def conversion_fee(self, conversion_fee):
        """
        Sets the conversion_fee of this TransactionDetails.

        :param conversion_fee: The conversion_fee of this TransactionDetails.
        :type: LabelValuePair
        """

        self._conversion_fee = conversion_fee

    @property
    def conversion_fee_percent(self):
        """
        Gets the conversion_fee_percent of this TransactionDetails.

        :return: The conversion_fee_percent of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._conversion_fee_percent

    @conversion_fee_percent.setter
    def conversion_fee_percent(self, conversion_fee_percent):
        """
        Sets the conversion_fee_percent of this TransactionDetails.

        :param conversion_fee_percent: The conversion_fee_percent of this TransactionDetails.
        :type: LabelValuePair
        """

        self._conversion_fee_percent = conversion_fee_percent

    @property
    def transaction_number(self):
        """
        Gets the transaction_number of this TransactionDetails.

        :return: The transaction_number of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """
        Sets the transaction_number of this TransactionDetails.

        :param transaction_number: The transaction_number of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_number = transaction_number

    @property
    def transaction_date(self):
        """
        Gets the transaction_date of this TransactionDetails.

        :return: The transaction_date of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """
        Sets the transaction_date of this TransactionDetails.

        :param transaction_date: The transaction_date of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_date = transaction_date

    @property
    def amount_foreign_currency(self):
        """
        Gets the amount_foreign_currency of this TransactionDetails.

        :return: The amount_foreign_currency of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._amount_foreign_currency

    @amount_foreign_currency.setter
    def amount_foreign_currency(self, amount_foreign_currency):
        """
        Sets the amount_foreign_currency of this TransactionDetails.

        :param amount_foreign_currency: The amount_foreign_currency of this TransactionDetails.
        :type: LabelValuePair
        """

        self._amount_foreign_currency = amount_foreign_currency

    @property
    def transaction_amount(self):
        """
        Gets the transaction_amount of this TransactionDetails.

        :return: The transaction_amount of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """
        Sets the transaction_amount of this TransactionDetails.

        :param transaction_amount: The transaction_amount of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_amount = transaction_amount

    @property
    def extra_details(self):
        """
        Gets the extra_details of this TransactionDetails.

        :return: The extra_details of this TransactionDetails.
        :rtype: list[LabelValuePair]
        """
        return self._extra_details

    @extra_details.setter
    def extra_details(self, extra_details):
        """
        Sets the extra_details of this TransactionDetails.

        :param extra_details: The extra_details of this TransactionDetails.
        :type: list[LabelValuePair]
        """

        self._extra_details = extra_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TransactionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
