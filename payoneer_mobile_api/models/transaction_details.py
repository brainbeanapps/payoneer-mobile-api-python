# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TransactionDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, transaction_number=None, transaction_date=None, amount_foreign_currency=None, transaction_amount=None, extra_details=None):
        """
        TransactionDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'transaction_number': 'LabelValuePair',
            'transaction_date': 'LabelValuePair',
            'amount_foreign_currency': 'LabelValuePair',
            'transaction_amount': 'LabelValuePair',
            'extra_details': 'list[LabelValuePair]'
        }

        self.attribute_map = {
            'transaction_number': 'TransactionNumber',
            'transaction_date': 'TransactionDate',
            'amount_foreign_currency': 'AmountForeignCurrency',
            'transaction_amount': 'TransactionAmount',
            'extra_details': 'ExtraDetails'
        }

        self._transaction_number = transaction_number
        self._transaction_date = transaction_date
        self._amount_foreign_currency = amount_foreign_currency
        self._transaction_amount = transaction_amount
        self._extra_details = extra_details

    @property
    def transaction_number(self):
        """
        Gets the transaction_number of this TransactionDetails.

        :return: The transaction_number of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """
        Sets the transaction_number of this TransactionDetails.

        :param transaction_number: The transaction_number of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_number = transaction_number

    @property
    def transaction_date(self):
        """
        Gets the transaction_date of this TransactionDetails.

        :return: The transaction_date of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """
        Sets the transaction_date of this TransactionDetails.

        :param transaction_date: The transaction_date of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_date = transaction_date

    @property
    def amount_foreign_currency(self):
        """
        Gets the amount_foreign_currency of this TransactionDetails.

        :return: The amount_foreign_currency of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._amount_foreign_currency

    @amount_foreign_currency.setter
    def amount_foreign_currency(self, amount_foreign_currency):
        """
        Sets the amount_foreign_currency of this TransactionDetails.

        :param amount_foreign_currency: The amount_foreign_currency of this TransactionDetails.
        :type: LabelValuePair
        """

        self._amount_foreign_currency = amount_foreign_currency

    @property
    def transaction_amount(self):
        """
        Gets the transaction_amount of this TransactionDetails.

        :return: The transaction_amount of this TransactionDetails.
        :rtype: LabelValuePair
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """
        Sets the transaction_amount of this TransactionDetails.

        :param transaction_amount: The transaction_amount of this TransactionDetails.
        :type: LabelValuePair
        """

        self._transaction_amount = transaction_amount

    @property
    def extra_details(self):
        """
        Gets the extra_details of this TransactionDetails.

        :return: The extra_details of this TransactionDetails.
        :rtype: list[LabelValuePair]
        """
        return self._extra_details

    @extra_details.setter
    def extra_details(self, extra_details):
        """
        Sets the extra_details of this TransactionDetails.

        :param extra_details: The extra_details of this TransactionDetails.
        :type: list[LabelValuePair]
        """

        self._extra_details = extra_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TransactionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
