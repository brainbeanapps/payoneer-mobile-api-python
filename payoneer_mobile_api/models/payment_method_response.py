# coding: utf-8

"""
    Payoneer Mobile API

    Swagger specification for https://mobileapi.payoneer.com

    OpenAPI spec version: 0.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaymentMethodResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mobile_account_id=None, type=None, primary_field=None, primary_field=None, secondary_field=None, display_name_resource=None, use_secondary_field=None, status=None, currency=None, balance=None, status_category=None, allow_transactions=None):
        """
        PaymentMethodResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mobile_account_id': 'int',
            'type': 'int',
            'primary_field': 'str',
            'primary_field': 'str',
            'secondary_field': 'str',
            'display_name_resource': 'str',
            'use_secondary_field': 'bool',
            'status': 'int',
            'currency': 'str',
            'balance': 'PaymentMethodBalance',
            'status_category': 'int',
            'allow_transactions': 'bool'
        }

        self.attribute_map = {
            'mobile_account_id': 'MobileAccountId',
            'type': 'Type',
            'primary_field': '_PrimaryField',
            'primary_field': 'PrimaryField',
            'secondary_field': 'SecondaryField',
            'display_name_resource': 'DisplayNameResource',
            'use_secondary_field': 'UseSecondaryField',
            'status': 'Status',
            'currency': 'Currency',
            'balance': 'Balance',
            'status_category': 'StatusCategory',
            'allow_transactions': 'AllowTransactions'
        }

        self._mobile_account_id = mobile_account_id
        self._type = type
        self._primary_field = primary_field
        self._primary_field = primary_field
        self._secondary_field = secondary_field
        self._display_name_resource = display_name_resource
        self._use_secondary_field = use_secondary_field
        self._status = status
        self._currency = currency
        self._balance = balance
        self._status_category = status_category
        self._allow_transactions = allow_transactions

    @property
    def mobile_account_id(self):
        """
        Gets the mobile_account_id of this PaymentMethodResponse.

        :return: The mobile_account_id of this PaymentMethodResponse.
        :rtype: int
        """
        return self._mobile_account_id

    @mobile_account_id.setter
    def mobile_account_id(self, mobile_account_id):
        """
        Sets the mobile_account_id of this PaymentMethodResponse.

        :param mobile_account_id: The mobile_account_id of this PaymentMethodResponse.
        :type: int
        """

        self._mobile_account_id = mobile_account_id

    @property
    def type(self):
        """
        Gets the type of this PaymentMethodResponse.

        :return: The type of this PaymentMethodResponse.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PaymentMethodResponse.

        :param type: The type of this PaymentMethodResponse.
        :type: int
        """

        self._type = type

    @property
    def primary_field(self):
        """
        Gets the primary_field of this PaymentMethodResponse.

        :return: The primary_field of this PaymentMethodResponse.
        :rtype: str
        """
        return self._primary_field

    @primary_field.setter
    def primary_field(self, primary_field):
        """
        Sets the primary_field of this PaymentMethodResponse.

        :param primary_field: The primary_field of this PaymentMethodResponse.
        :type: str
        """

        self._primary_field = primary_field

    @property
    def primary_field(self):
        """
        Gets the primary_field of this PaymentMethodResponse.

        :return: The primary_field of this PaymentMethodResponse.
        :rtype: str
        """
        return self._primary_field

    @primary_field.setter
    def primary_field(self, primary_field):
        """
        Sets the primary_field of this PaymentMethodResponse.

        :param primary_field: The primary_field of this PaymentMethodResponse.
        :type: str
        """

        self._primary_field = primary_field

    @property
    def secondary_field(self):
        """
        Gets the secondary_field of this PaymentMethodResponse.

        :return: The secondary_field of this PaymentMethodResponse.
        :rtype: str
        """
        return self._secondary_field

    @secondary_field.setter
    def secondary_field(self, secondary_field):
        """
        Sets the secondary_field of this PaymentMethodResponse.

        :param secondary_field: The secondary_field of this PaymentMethodResponse.
        :type: str
        """

        self._secondary_field = secondary_field

    @property
    def display_name_resource(self):
        """
        Gets the display_name_resource of this PaymentMethodResponse.

        :return: The display_name_resource of this PaymentMethodResponse.
        :rtype: str
        """
        return self._display_name_resource

    @display_name_resource.setter
    def display_name_resource(self, display_name_resource):
        """
        Sets the display_name_resource of this PaymentMethodResponse.

        :param display_name_resource: The display_name_resource of this PaymentMethodResponse.
        :type: str
        """

        self._display_name_resource = display_name_resource

    @property
    def use_secondary_field(self):
        """
        Gets the use_secondary_field of this PaymentMethodResponse.

        :return: The use_secondary_field of this PaymentMethodResponse.
        :rtype: bool
        """
        return self._use_secondary_field

    @use_secondary_field.setter
    def use_secondary_field(self, use_secondary_field):
        """
        Sets the use_secondary_field of this PaymentMethodResponse.

        :param use_secondary_field: The use_secondary_field of this PaymentMethodResponse.
        :type: bool
        """

        self._use_secondary_field = use_secondary_field

    @property
    def status(self):
        """
        Gets the status of this PaymentMethodResponse.

        :return: The status of this PaymentMethodResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PaymentMethodResponse.

        :param status: The status of this PaymentMethodResponse.
        :type: int
        """

        self._status = status

    @property
    def currency(self):
        """
        Gets the currency of this PaymentMethodResponse.

        :return: The currency of this PaymentMethodResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this PaymentMethodResponse.

        :param currency: The currency of this PaymentMethodResponse.
        :type: str
        """

        self._currency = currency

    @property
    def balance(self):
        """
        Gets the balance of this PaymentMethodResponse.

        :return: The balance of this PaymentMethodResponse.
        :rtype: PaymentMethodBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """
        Sets the balance of this PaymentMethodResponse.

        :param balance: The balance of this PaymentMethodResponse.
        :type: PaymentMethodBalance
        """

        self._balance = balance

    @property
    def status_category(self):
        """
        Gets the status_category of this PaymentMethodResponse.

        :return: The status_category of this PaymentMethodResponse.
        :rtype: int
        """
        return self._status_category

    @status_category.setter
    def status_category(self, status_category):
        """
        Sets the status_category of this PaymentMethodResponse.

        :param status_category: The status_category of this PaymentMethodResponse.
        :type: int
        """

        self._status_category = status_category

    @property
    def allow_transactions(self):
        """
        Gets the allow_transactions of this PaymentMethodResponse.

        :return: The allow_transactions of this PaymentMethodResponse.
        :rtype: bool
        """
        return self._allow_transactions

    @allow_transactions.setter
    def allow_transactions(self, allow_transactions):
        """
        Sets the allow_transactions of this PaymentMethodResponse.

        :param allow_transactions: The allow_transactions of this PaymentMethodResponse.
        :type: bool
        """

        self._allow_transactions = allow_transactions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaymentMethodResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
